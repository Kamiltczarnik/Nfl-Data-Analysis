# 🏈 NFL Game Prediction Model

**Goal:** Output calibrated **win probabilities (%)** for any NFL game using rich pre-game context (team strength, matchups, injuries, weather, market priors) and upset-aware features.

---

See also: [Architecture & Module Contracts](docs/ARCHITECTURE.md)
See also: [API](docs/API.md)

---

Contributor guardrails:
- Start by reading `docs/MANIFEST.md` and `docs/CONVENTIONS.md`.
- Do not create new folders/files unless you update the manifest and link from docs.
- Use configs in `configs/*.yaml` and `overrides/*.yaml` for behavior changes.

## ✅ Pre-flight Checklist (Conceptual)
- Define **data footprint** (teams, players, matchups, markets, weather, injuries) and which source supplies each field.
- Prefer **`nflreadpy`** (active) over `nfl_data_py` (deprecated) for schedules, PBP, weekly stats, rosters, injuries, snaps, depth charts, and IDs.
- Build a robust **ETL → feature store** (weekly + in-week updates for injuries) with versioning and leakage guards.
- Ship a **baseline logistic** (EPA + spread + home/rest) and an **ensemble** (GBM/XGBoost) with post-hoc **calibration**.
- Implement **validation gates** (Brier/log-loss, calibration, sanity checks) after each integration.
- Provide **manual overrides** (injury/weather/lineup) via YAML/JSON in the prediction interface.
- Plan tight **iteration loops**: feature ablations, upset error analysis, drift monitoring, weekly refresh.

Important principle: prioritize the current season. Features and aggregates should be computed from the ongoing season only, with recent games weighted more heavily (EWMA/high-alpha). Prior seasons are not used by default except as optional low-weight priors for early weeks.

---

## 🔑 What Best Predicts Winning (Prioritized Signals)

> Use these to guide feature importance and ablations. Source coverage notes included.

1) **Efficiency per play (esp. passing)**
- **Offensive EPA/play (pass >> run)** and **Defensive EPA/play allowed** are the strongest game-to-game indicators.
- **Early-down EPA (pass)** is extra predictive (drives later 4th-down leverage).
- **Success rate** (EPA > 0 share) is a variance-reduced cousin of EPA.
- **Where**: `nflreadpy.import_pbp_data` → aggregate by team/game/segment; also in nflfastR releases.

2) **Early-down pass rate & PROE (Pass Rate Over Expected)**
- Coaching/identity metric; high signal for forward-looking offense strength.
- **Where**: compute from PBP (regress pass probability on game state → actual − expected); RBSDM provides reference visuals.

3) **Explosive plays & aDOT**
- Explosive pass rate (e.g., ≥20 yds or EPA threshold) and **aDOT** complement EPA to capture verticality/chunk gains.
- **Where**: PBP fields (`air_yards`, `yards_gained`) → compute rates.

4) **QB quality composites (EPA + CPOE)**
- Blend **QB EPA/play** with **CPOE** (completion % over expectation).
- **Where**: PBP has completion probability `cp` → derive CPOE and aggregate by QB.

5) **Pass protection & pressure (trenches)**
- **Pressure rate allowed/created** + **time to throw** directly impact passing EPA.
- **Where**: Best public proxies: ESPN **PBWR/PRWR** (tracking-based; proprietary but page tables are viewable/scrapable). PBP approximations via sacks/hits exist but are weaker.

6) **Field position & finishing drives**
- **Avg starting field position**, **points/drive**, **scores/drive**, **drive success rate** compress situational noise.
- **Where**: Derive from PBP drive starts/results.

7) **4th-down decision-making**
- Aggressiveness vs. model optimal affects win prob on the margins (small lift, but real).
- **Where**: PBP’s WP model → compute “went for it” vs. recommendation deltas.

8) **Special Teams**
- **ST DVOA** captures hidden field position/kicking value; season-level strength.
- **Where**: FTN (subscription) or proxy via starting field position and kick results.

9) **“Luck” & volatility controls**
- **Turnover margin**, **fumble recovery %**, **3rd-down & RZ TD over expected** explain *what happened* but are noisy for *what will happen*. Use as regression-to-mean controls.
- **Where**: compute from PBP; RBSDM “luck” views provide reference.

### “Complex” Metrics That Add Predictive Lift
- **EPA/WP models** (foundation; included in PBP).
- **CPOE/Completion probability** (PBP `cp` enables CPOE derivation; NGS describes methodology).
- **PROE** (strategy/identity; compute from PBP).
- **Trench win rates** (PBWR/PRWR; scrape ESPN if desired).
- **DVOA (Off/Def/ST)** (season-level team strength; FTN).
- **Composite QB tiers** (EPA+CPOE, success+aDOT) outperforms box-score metrics.

---

## 🧱 Minimal High-Impact Feature Set (Pre-Game)
- **Market priors**: closing `spread_line`, `total_line`, `moneyline` (schedules).
- **Team strength**: rolling **Off EPA/play** (pass & run), **Def EPA/play allowed**, early-down splits, **success rate**, **explosive pass rate**.
- **QB form**: last 4–6 games **EPA+CPOE**, **aDOT**.
- **Trenches**: pressure allowed/created (or ESPN PBWR/PRWR if scraped).
- **Special teams**: ST DVOA (if available) or proxies (avg starting field position).
- **Situational**: penalty rate, **rest/travel/short week**, **injury counts/availability**.

> **Live model** (optional): use nflfastR WP + current game EPA/success + drive stats + 4th-down decisions for in-game win prob.

---

## 📚 Data Sources & Package Coverage

### Prefer `nflreadpy` (active) — mirrors nflfastR/nflverse data releases
**Core readers**
- **Play-by-play / weekly / seasonal**: `import_pbp_data`, `import_weekly_data`, `import_seasonal_data`, `see_pbp_cols`, `see_weekly_cols`
- **Schedules (with markets)**: `import_schedules` → `spread_line`, `total_line`, `moneyline`
- **Rosters/snaps/depth charts**: `import_seasonal_rosters`, `import_weekly_rosters`, `import_snap_counts`, `import_depth_charts`
- **Injuries**: `import_injuries`
- **IDs/Officials**: `import_ids`, `import_officials`
- **Advanced**: `import_seasonal_pfr`, `import_weekly_pfr`, `import_qbr`, `import_ftn_data` (FTN charting subset)
- **Maintenance**: `cache_pbp`, `clean_nfl_data`

**Notes**
- `nfl_data_py` is **deprecated**; keep for fallbacks only.
- PBP already includes **EPA**, **WP**, **cp** (for **CPOE**), **air_yards**, **penalties**, clock, score, down/distance.

### When You Need to Scrape/Stitch
- **ESPN PBWR/PRWR/RSWR/RBWR**: scrape team tables by week/season; store keyed by `team`, `season`, `week`.
- **NGS leaderboards** (time to throw, aggressiveness, separation): scrape if needed; otherwise omit.
- **DVOA (FTN)**: ingest CSV exports if subscribed (unit-level O/D/ST + opponent adjustments).

---

## 🗃️ Data Dictionary (Modeling Table)

**Grain:** one row per **game** per **team** (two rows per game), pre-game features only.

| Column | Type | Description |
|---|---:|---|
| `game_id` | str | Unique game identifier (season_week_teams) |
| `season`, `week` | int | Season and NFL week |
| `team`, `opponent` | str | Abbrevs |
| `home` | int | 1 if team is home (neutral site handled via `neutral` flag) |
| `neutral` | int | Neutral site flag |
| `spread_close`, `total_close`, `moneyline_close` | float | From schedules |
| `off_epa_play_l3`, `def_epa_play_allowed_l3` | float | Rolling (last 3) |
| `off_pass_epa_l3`, `off_run_epa_l3` | float | Rolling by phase |
| `def_pass_epa_allowed_l3`, `def_run_epa_allowed_l3` | float | Rolling by phase |
| `off_success_l3`, `def_success_allowed_l3` | float | Success rates |
| `early_down_pass_epa_l3` | float | Early-down only |
| `explosive_pass_rate_l5` | float | ≥20y or EPA threshold |
| `proe_l5`, `early_down_pass_rate_l5` | float | Strategy metrics |
| `qb_epa_cpoe_l6` | float | QB composite |
| `adot_l5` | float | Air-yards depth |
| `pressure_allowed_l5`, `pressure_created_l5` | float | PBP proxy or ESPN scrape |
| `sack_rate_oe_l5` | float | Sacks over expected proxy |
| `st_start_fp_l5` | float | Avg starting field position |
| `points_per_drive_l5`, `scores_per_drive_l5` | float | Drive finishing |
| `penalty_rate_l5` | float | Flags per play |
| `rest_days` | int | Days since prior game |
| `short_week` | int | Thu game after Sun/Mon flag |
| `travel_dist_km` | float | From stadium geos (optional) |
| `primetime` | int | Night game flag |
| `roof`, `surface` | str | Dome/outdoor; turf/grass |
| `wx_temp_f`, `wx_wind_mph`, `wx_precip` | float | Forecast at kickoff |
| `inj_out_count`, `inj_q_count` | int | Injury counts (out/questionable) |
| `ol_continuity_index` | float | % of prior week starters returned |
| `turnover_luck_adj_l5` | float | Over-expected turnovers (regression flag) |
| `label_win` | int | 1 if team won (for training only) |

> **Leakage guard:** all rolling windows and priors computed using **games strictly before the prediction game**; market fields use **closing** lines from the same game (allowed for benchmarking/calibration but ensure they reflect *pre-kickoff* info only).

---

## 🧪 Feature Engineering Specs

### Rolling Windows
- Windows: **L3** (last 3), **L5** (last 5), and **exponentially weighted** within-season (default **α=0.8–0.9**) for strong recency.
- Early-down filter: downs ∈ {1,2} and neutral game state (score within ±7, time Q1–Q3).
- Season boundary: do not mix prior-season games into windows. Optional low-weight prior can be added for weeks < window size via config.

### Success Rate
- `success = 1 if EPA > 0 else 0` (pass/run and total); compute rates by window.

### Explosive Rate
- Pass explosive: share of pass plays with `yards_gained ≥ 20` **or** `EPA ≥ 0.6`.

### PROE
- Fit logistic model on pass probability using down, distance, yardline, time, score diff, etc.
- `PROE = actual_pass_rate − expected_pass_prob` (game/team and early-down variants).

### QB EPA+CPOE Composite
- Aggregate **QB EPA/play** and **CPOE** (mean or z-scored blend) across recent starts.
- Assign backup starts by depth chart/snap counts.

### Pressure & Trenches
- **PBP proxies**: pressure ≈ `(sacks + QB hits + hurries)/dropbacks` if available; else sack rate.
- **Best**: ESPN PBWR/PRWR weekly tables if scraped; store as `pbwr_off`, `prwr_def`.

### Finishing Drives
- Compute per-drive **points**, **scores**, **start field position**, **drive success %**.

### Injury Adjustments
- Parse **`import_injuries`**: map `OUT/DOUBTFUL/QUESTIONABLE` + practice DNP/LP/FP to an **availability score** by position group; weighted sum (QB > OT > WR > CB > S > RB > LB > DT/DE > TE > FB).
- **OL continuity**: % of prior starting OL who start this week (join depth charts + snap counts).

### Weather
- Join forecast (or manual override) to **wx_*** columns; for domes set `wx_wind_mph = 0`, no precip.

---

## 🤖 Modeling

### Framing & Targets
- Binary classification: `label_win` (home/away row split).
- Optimize **log-loss**; report **Brier** and **calibration** (reliability curves, ECE).

### Models
- **Baseline**: Logistic regression on compact, high-signal features:  
  `home`, `rest_days`, `off_epa_play_l3`, `def_epa_play_allowed_l3`, `early_down_pass_epa_l3`, `spread_close`.
- **Ensemble**: Gradient Boosting (XGBoost/LightGBM) with the full feature set.
- **Stacking** (optional): Blend logistic + GBM + a simple **Elo-like** EPA-aware team rating.
  - Season weighting: train features to reflect current-season dominance; any prior-season features (if enabled) must have explicit decay and are off by default.

### Calibration
- Use **isotonic** (preferred) or **Platt** scaling on validation folds, targeting **closing moneyline-implied probabilities**.

### Cross-Validation / Backtesting
- **Time-series** folds by week (rolling origin). Final test on most recent seasons.
- Benchmarks:  
  - Market implied win prob,  
  - Spread-only heuristic (convert spread to prob via normal model).

---

## 🎯 Prediction Algorithm

**Inputs:**
- Teams, date/time, site/home/neutral, depth chart/starters, injury designations, weather, market lines, manual overrides.

**Process:**
1. Assemble rolling + matchup features from the feature store.  
2. Apply **manual overrides** (e.g., “QB OUT”, wind=25 mph) **before inference**.  
3. Predict with ensemble → apply **calibration** → return probabilities.

**Outputs:**
- `team_win_prob`, `opp_win_prob` (sum to 1.00).  
- **Top drivers** via SHAP values.  
- **Upset alert** flags when favorite prob ∈ (0.55, 0.68) but mismatch features are extreme.

---
## 🌐 Future FastAPI + React (SPA) Integration

- Backend: FastAPI app under `src/api/` with routers:
  - `GET /health/` — service health
  - `GET /games/?season=&week=` — list games for slate/history
  - `POST /predict/` — run prediction with optional overrides payload
- Serving: `src/serve/predict.py` remains the core inference entrypoint used by both CLI and API.
- Frontend (later): single-page React app consuming these endpoints; supports browsing past weeks/years and this week’s slate, clicking a game to predict, and a modal to apply overrides.
- Storage & contracts: Responses conform to `docs/API.md`; modeling table per `docs/DATA_CONTRACTS.md`.

## 📊 Evaluation & Iteration

**Primary metrics:** log-loss, Brier, ECE; **secondary:** AUROC (diagnostic), hit-rate on underdogs.  
**Slices:** QB change weeks, severe weather (wind ≥ 15 mph), short week, long travel, OL continuity low (<60%).  
**Ablations:** remove families (injury, weather, trenches, market priors) → measure delta in log-loss/Brier.

**Goal thresholds**
- **Baseline**: Brier ≤ **0.20**, calibration slope ≈ **1.0**.  
- **Ensemble**: **2–3%** log-loss improvement over baseline; **ECE < 0.03**.  
- **Vs market**: holdout Brier ≤ **market Brier + 0.005**.

---

## 🗄️ Data Management & Ops

**Storage**
- Lake: **Parquet** (partitioned by `season`/`week`),  
- Feature store: **Postgres/SQLite** tables for fast joins and point-in-time retrieval.

**Versioning**
- Keep **raw snapshots** and **as_of** timestamps to reproduce any week.

**Jobs**
- **Weekly refresh**: schedules, weekly stats, PBP, rosters, injuries, snaps/depth.  
- **In-week deltas**: injuries & depth charts Thu–Sun morning.  
- **Health checks**: row counts, null ratios, expected keys, dome wind=0, opponent joins valid.

**Manual Overrides**
```yaml
# overrides/week_06.yaml
week: 6
game_id: 2025_06_BAL_TEN
overrides:
  BAL.QB: "out"              # impacts qb_epa_cpoe_l6 and starter mapping
  BAL.OL.LT: "out"           # reduces ol_continuity_index
  weather.wind_mph: 22       # increases weather penalty on deep passing
  schedule.spread_line: -1.5 # allow manual line edits if markets update


Sprint Info:
Sprint 1 – Data Pipeline Foundations

S1.1 Install & pin nflreadpy; create readers.py with robust retries + caching.

S1.2 Ingest schedules (spread/total/moneyline) → parquet + schema test.

S1.3 Ingest weekly + pbp → select minimal columns for MVP.

S1.4 Ingest rosters, injuries, snap_counts, depth_charts.

S1.5 Build ID map with import_ids; normalize team/player IDs.

S1.6a Rosters & backups: define starter mapping rules (priority: latest depth chart > recent snaps > manual overrides). Persist weekly starter table keyed by (`season`,`week`,`team`,`position`,`player_id`).

S1.6b Injuries ingestion: availability scoring by position group (QB > OT > WR > CB > S > RB > LB > DT/DE > TE > FB). Produce `inj_out_count`, `inj_q_count`, and per-position availability index. Wire in-week deltas (Thu–Sun AM).

S1.6 Validation gate: spreads present; EPA/WP/cp non-null in PBP; injuries observed for ≥ 28 teams; weekly starter table populated → PASS to proceed.

S1.7 FastAPI scaffold (no logic): add `src/api/*` and `docs/API.md`.

Sprint 2 – Baseline Model (Logistic)

S2.1 Rolling features: off_epa_play_l3, def_epa_play_allowed_l3, early_down_pass_epa_l3.

S2.1a Sliding windows configurable via `configs/features.yaml` (default L3/L5 and EWMA α=0.7). Early-season shrinkage when weeks < window size.

S2.2 Situational: home, rest_days; Market: spread_close.
S2.2a Basic opponent-adjusted strength-of-schedule (SoS) for recent EPA/success aggregates to reduce early-season bias.

S2.3 Train logistic; evaluate log-loss, Brier ≤ 0.20, calibration slope ~1.0.

S2.4 Save model + scaler + column order; add CLI baseline prediction.

S2.5 Validation gate: meets thresholds → PASS.

Sprint 3 – Matchup Context

S3.1 Off vs Def splits for pass/run EPA & success.

S3.1a Apply sliding windows (L3/L5/EWMA) and early-down neutral filters.

S3.2 Explosive pass rate, volatility (std dev EPA).
S3.2a Optionally SoS-normalize these aggregates (config toggle).

S3.3 Turnover luck regression indicators.

S3.4 Sanity checks on feature distributions; opponent join correctness → PASS.

Sprint 4 – Player & Trenches

S4.1 QB module: EPA+CPOE, aDOT; map backups via depth charts/snap counts.

S4.2 Trench proxies: pressure allowed/created; (optional) ESPN PBWR/PRWR scrape.

S4.3 OL continuity index from depth chart changes.
S4.3a Coverage/matchups scope: team-level features only; individual CB–WR assignments are out-of-scope unless NGS/subscription data is added later (documented in Non-goals).

S4.4 Validation gate: trench mismatch examples surface in features → PASS.

Sprint 5 – Ensemble + Calibration

S5.1 Train GBM/XGBoost; include SoS-normalized and raw feature variants; importance sanity check (pass > run).

S5.2 Simple stack with logistic and/or Elo-like prior.

S5.3 Fit isotonic calibration on validation folds (target moneyline-implied probs).

S5.4 Goals: ≥2–3% log-loss improvement; ECE < 0.03 → PASS.

Sprint 6 – Serving & Overrides

S6.1 CLI predict.py: load matchup context, apply overrides/*.yaml.

S6.2 Output: team win %, drivers (SHAP), note if upset flag triggers.
S6.2a Historical queries enforce point-in-time correctness (cutoff at game start, no leakage).

S6.3 Validation: toggling QB: out reduces win % materially and explainably → PASS.

S6.4 (moved to Sprint 8)
S6.5 (moved to Sprint 8)

Sprint 8 – API & SPA Contract

S8.1 Wire FastAPI to `src/serve/predict.py`; implement `GET /games` with filtering (season, week) and pagination.
S8.2 Implement `POST /predict` with overrides payload validation; return calibrated probabilities + drivers.
S8.3 Historical data handling: query modeling table/feature store by `season`/`week` and ensure point-in-time correctness; include response metadata with window parameters used.
S8.4 Response versioning and schemas; enable CORS for SPA; error handling patterns.
S8.5 Caching headers and simple in-memory cache for slate endpoints.
S8.6 Contract tests for endpoints; example requests/responses in `docs/API.md`.

Sprint 7 – Evaluation Harness

S7.1 Time-series CV backtests by week; holdout seasons.

S7.2 Reliability plots; compute ECE.

S7.3 Slice errors: QB changes, weather ≥ 15 mph, short week, OL continuity < 60%.

S7.4 Goal: holdout Brier ≤ market + 0.005 → PASS.


🧰 Key nfl-data-py / nflreadpy Functions (Quick Reference)

Play-by-play / weekly / seasonal:
import_pbp_data, import_weekly_data, import_seasonal_data,
see_pbp_cols, see_weekly_colsc

Schedules with betting lines:
import_schedules → spread_line, total_line, moneyline

Rosters/snaps/depth:
import_seasonal_rosters, import_weekly_rosters, import_snap_counts, import_depth_charts

Injuries:
import_injuries

IDs/Officials:
import_ids, import_officials

Advanced:
import_seasonal_pfr, import_weekly_pfr, import_qbr, import_ftn_data

Maintenance:
cache_pbp, clean_nfl_data

Preferred: Use nflreadpy (active). nfl_data_py is deprecated.

⚠️ Practical Notes & Gotchas

Don’t overweight turnovers, 3rd-down %, RZ TD %—use as luck controls (Δ over expected).

Use early-down splits wherever possible (neutral situations).

Always compute features as-of the prediction time (strict time ordering).

DVOA & ESPN PBWR/PRWR lift accuracy but may require subscription/scrape; keep them optional and modular.

Benchmark against market implied probabilities; goal is calibrated win %.